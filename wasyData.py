# -*- coding: utf-8 -*-
initial = [ "-4.90000000e+01", "-4.90000000e+01", "-4.90000000e+01", "-4.90000000e+01",
 "-4.90000000e+01", "-4.90000000e+01", "-4.89987661e+01", "-4.89983529e+01",
 "-4.89977896e+01", "-4.90185093e+01", "-4.89969299e+01", "-4.89967081e+01",
 "-4.89962835e+01", "-4.89969950e+01", "-4.89975564e+01", "-4.89979999e+01",
 "-4.91930431e+01", "-4.91979789e+01", "-4.92029303e+01", "-4.92082532e+01",
 "-4.92145215e+01", "-4.92183525e+01", "-4.88713053e+01", "-4.88388906e+01",
 "-4.88001643e+01", "-4.87448986e+01", "-4.86694084e+01", "-4.85207489e+01",
 "-4.82377004e+01", "-4.82637423e+01", "-4.83084330e+01", "-4.83799881e+01",
 "-4.85371968e+01", "-4.88683467e+01", "-5.06564834e+01", "-5.08224496e+01",
 "-5.09885087e+01", "-5.11634980e+01", "-5.12864019e+01", "-5.11655862e+01",
 "-4.81853009e+01", "-4.75015657e+01", "-4.65862102e+01", "-4.51969219e+01",
 "-4.31689120e+01", "-4.03547104e+01", "-3.11467379e+01", "-2.94305948e+01",
 "-2.71543317e+01", "-2.41473675e+01", "-2.02606324e+01", "-1.53656991e+01",
 "-2.83289943e+00", "1.34617749e-01", "3.95098310e+00", "8.61076825e+00",
 "1.42431005e+01", "2.09069806e+01", "3.46251493e+01", "3.84576219e+01",
 "0.00000000e+00", "0.00000000e+00", "0.00000000e+00", "0.00000000e+00",
 "0.00000000e+00", "0.00000000e+00", "2.50977920e-03", "2.50965225e-03",
 "2.50947799e-03", "2.51478559e-03", "2.50920932e-03", "2.50913948e-03",
 "2.50900516e-03", "2.50922980e-03", "2.50940543e-03", "2.50954320e-03",
 "2.50659529e-03", "2.50403955e-03", "2.50095776e-03", "2.49677006e-03",
 "2.48954230e-03", "2.46698395e-03", "2.32210094e-03", "2.31731882e-03",
 "2.31262546e-03", "2.30775601e-03", "2.30448764e-03", "2.31003200e-03",
 "2.56093870e-03", "2.59372419e-03", "2.63529892e-03", "2.68627709e-03",
 "2.77058026e-03", "2.89476590e-03", "3.02467906e-03", "2.98030048e-03",
 "2.91106048e-03", "2.78557109e-03", "2.54584160e-03", "2.14843383e-03",
 "8.46471727e-04", "7.23706269e-04", "5.96260054e-04", "4.59157241e-04",
 "3.37554267e-04", "2.58075216e-04", "3.01010768e-04", "3.25793124e-04",
 "3.65992443e-04", "4.31524604e-04", "5.35399391e-04", "6.97766283e-04",
 "1.37201409e-03", "1.54728147e-03", "1.80687774e-03", "2.19241451e-03",
 "2.76944200e-03", "3.64532269e-03", "6.71575531e-03", "7.72196634e-03",
 "-7.80000000e+01", "-7.80000000e+01", "-7.80000000e+01", "-7.80000000e+01",
 "-7.80000000e+01", "-7.80000000e+01", "-7.85567136e+01", "-7.85567136e+01",
 "-7.85567137e+01", "-7.85567138e+01", "-7.85567143e+01", "-7.85567147e+01",
 "-7.85567152e+01", "-7.85567156e+01", "-7.85567161e+01", "-7.85567164e+01",
 "-7.85567157e+01", "-7.85567149e+01", "-7.85567139e+01", "-7.85567129e+01",
 "-7.85567116e+01", "-7.85567098e+01", "-7.85567079e+01", "-7.85567057e+01",
 "-7.85567038e+01", "-7.85567022e+01", "-7.85567012e+01", "-7.85567011e+01",
 "-7.85567037e+01", "-7.85567074e+01", "-7.85567113e+01", "-7.85567153e+01",
 "-7.85567191e+01", "-7.85567217e+01", "-7.85566082e+01", "-7.85564628e+01",
 "-7.85561963e+01", "-7.85555378e+01", "-7.85534127e+01", "-7.85446787e+01",
 "-7.81551036e+01", "-7.77087995e+01", "-7.68968621e+01", "-7.50958408e+01",
 "-7.14070837e+01", "-6.68524150e+01", "-6.26640585e+01", "-5.89838818e+01",
 "-5.57000863e+01", "-5.27325536e+01", "-5.00258079e+01", "-4.75346338e+01",
 "-4.49636237e+01", "-4.28967973e+01", "-4.28615301e+01", "-4.28611523e+01",
 "-4.30938667e+01", "-4.40921016e+01", "-4.48124465e+01", "-4.70178830e+01",
 "5.00000000e-01", "5.00000000e-01", "5.00000000e-01", "5.00000000e-01",
 "5.00000000e-01", "5.00000000e-01", "4.77850192e-01", "4.77850196e-01",
 "4.77850200e-01", "4.77850205e-01", "4.77850229e-01", "4.77850253e-01",
 "4.77850277e-01", "4.77850297e-01", "4.77850317e-01", "4.77850334e-01",
 "4.77850290e-01", "4.77850245e-01", "4.77850193e-01", "4.77850134e-01",
 "4.77850063e-01", "4.77849971e-01", "4.77849881e-01", "4.77849779e-01",
 "4.77849690e-01", "4.77849619e-01", "4.77849578e-01", "4.77849586e-01",
 "4.77849715e-01", "4.77849907e-01", "4.77850106e-01", "4.77850307e-01",
 "4.77850496e-01", "4.77850599e-01", "4.77842938e-01", "4.77833170e-01",
 "4.77815318e-01", "4.77771252e-01", "4.77629012e-01", "4.77044613e-01",
 "4.50697430e-01", "4.19270493e-01", "3.58573039e-01", "2.30001602e-01",
 "8.21989906e-02", "2.50306530e-02", "9.99470354e-03", "5.06002874e-03",
 "2.99627521e-03", "2.01502118e-03", "1.54038646e-03", "1.36445663e-03",
 "2.10205264e-03", "2.13509269e-03", "2.33597838e-03", "2.65034122e-03",
 "3.14992559e-03", "3.97567560e-03", "7.64320255e-03", "8.49775599e-03"]

import matplotlib.pyplot as plt
from wasylenko import main, plotMultiple
import numpy as np
import pprint

def getSoln(verbose=False, X0=None, tmax=3000, s=0.5, plot=False):
    '''Use X0=np.zeros((240,)) for an initial zero condition.'''
    # X, T = main(N=60, omega=6, tmax=2000, s=0.6, nstep=1000, verbose=False, X0=np.zeros((240,)))
    X, T = main(N=60, omega=6, tmax=tmax, s=s, nstep=1000, verbose=verbose, X0=X0, plot=plot)
    return X, T
    
# print X.shape

def displayFortran(stationary=False):
    if stationary:
        X0 = np.zeros((240,))
    else:
        X0 = None
    X, T = getSoln(verbose=False, plot=True, X0=X0)
    initial = X[800, :]
    pp = pprint.PrettyPrinter(indent=4).pprint
    for i, j in enumerate(initial):
        print "U(%d) = %s" % (i+1, j)
    plt.plot(initial)
    plt.show()

def writeDatFile(filename, verbose=False, X0=None, s=0.5):
    '''Creates a file wasy.dat that contains a full period
    of the traveling wave solution.'''
    X, T = getSoln(verbose=True, tmax=5000, s=s, X0=X0)
    istart = 611
    istop = 732
    #print T
    #print T[istart]
    #print T[istop]
    plotMultiple(X[istart:istop, :], T[istart:istop], s=0.5, show=True)
    
    # from sys import exit; exit()
    datfile = file(filename, 'w')
    for i in range(istart,istop):
        datfile.write(str(T[i]) + ' ')
        for j in range(X[i,:].size):
            datfile.write(('%e' % X[i,j]).replace('e', 'D') + ' ')
        datfile.write('\n')
    datfile.flush()
    datfile.close()

def showData(filename):
    lines = loadData(filename)
    print lines
    fig = plt.figure()
    ax = fig.gca()
    for j in range(1, len(lines[0])):
        ax.plot([l[0] for l in lines], [l[j] for l in lines])
    plt.show()
    
def loadData(filename):
    lines = file(filename).readlines()
    lines = [l.split() for l in lines]
    lines = [[float(x.replace('D', 'e')) for x in line] for line in lines]
    return np.array(lines)
    
if __name__=="__main__":
#     displayFortran(stationary=False) # print out Fortran code for initializing for a traveling-wave
#     displayFortran(stationary=True)  # print out Fortran code for initializing for a stationary solution.
    writeDatFile('wasy.dat')
